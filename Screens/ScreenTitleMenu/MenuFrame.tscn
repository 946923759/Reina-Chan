[gd_scene load_steps=24 format=2]

[ext_resource path="res://Sounds/Classic/Mega Man 4 SFX (25) - Menu Help.wav" type="AudioStream" id=4]
[ext_resource path="res://ubuntu-font-family/FallbackPixelFont.tres" type="DynamicFont" id=5]
[ext_resource path="res://CheatCodeDetector.gd" type="Script" id=6]
[ext_resource path="res://Sounds/Announcer/Mission Start/LetsParty.wav" type="AudioStream" id=7]
[ext_resource path="res://Screens/ScreenTitleMenu/TitleScreenV2.tres.gd" type="Script" id=8]
[ext_resource path="res://ubuntu-font-family/megaman_2.ttf" type="DynamicFontData" id=9]
[ext_resource path="res://Sounds/Classic/03 - MenuSelect.wav" type="AudioStream" id=10]
[ext_resource path="res://Sounds/Classic/37 - Chaos Emerald.ogg" type="AudioStream" id=11]
[ext_resource path="res://Screens/_transition/transition.tscn" type="PackedScene" id=13]
[ext_resource path="res://Sounds/Classic/Mega Man 4 SFX (20) - Weapon Switch.wav" type="AudioStream" id=14]

[sub_resource type="GDScript" id=1]
script/source = "extends Label
export var hasSubmenu = true;
export(String) var submenuNode;

#func action():
#	get_tree().change_scene(\"res://BossSelect.tscn\");


func _on_StartLabel_gui_input(event):
	if (event is InputEventMouseButton && event.pressed && event.button_index == 1):
		print(\"Clicked\")
	else:
		print(\"?\")


func _on_StartLabel_mouse_entered():
	print(\"Entered\")
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=2]
script/source = "extends Label
export var hasSubmenu = true;
export(String) var submenuNode;

func action():
	#It has to be done on start/continue in case the player changed the language
	Globals.load_stage_cutscenes()
	
	if Globals.load_player_game():
		var t = get_node(\"../../Transition\").OnCommand(Globals.playerData.currentCharacter)
		yield(t,\"finished\")
		Globals.change_screen(get_tree(),\"ScreenSelectStage\")
	else:
		Globals.change_screen(get_tree(),\"ScreenSaveDataError\")
"

[sub_resource type="GDScript" id=3]
script/source = "extends Label
export var hasSubmenu = false

func action():
	Globals.nextCutscene=\"cutscene1Data.txt\"
	Globals.change_screen(get_tree(),\"CutsceneFromFile\")
	#get_tree().change_scene(\"res://Cutscene/CutsceneFromFile.tscn\")
"

[sub_resource type="GDScript" id=4]
script/source = "extends Label
export var hasSubmenu = true;
export(String) var submenuNode = \"OptionsSubmenu\"
"

[sub_resource type="GDScript" id=5]
script/source = "extends Label
export var hasSubmenu = true;
export(String) var submenuNode;
"

[sub_resource type="GDScript" id=6]
script/source = "extends Label
export var hasSubmenu = false

func action():
	OS.shell_open(\"http://gfl.amaryllisworks.pw/gfgame\")
"

[sub_resource type="GDScript" id=7]
script/source = "extends Label
export var hasSubmenu = false

func action():
	get_tree().quit();
"

[sub_resource type="GDScript" id=8]
script/source = "extends VBoxContainer

var font = preload(\"res://ubuntu-font-family/MM2Font.tres\")
onready var parent = get_node(\"../\")
onready var desc = get_node(\"../DifficultySelect_Description\")
#var propertyToAdjust=\"gameDifficulty\"

func BitmapText(d):
	var l = Label.new()
	for property in d:
		l.set(property,d[property])
	l.set(\"custom_fonts/font\",font)
	l.add_to_group(\"Translatable\")
	return l

func setDescText():
	#desc.text=Globals.difficultyToString(Globals.playerData.gameDifficulty)
	desc.text = INITrans.GetString(\"Difficulty\",\"desc_\"+Globals.difficultyToString(Globals.playerData.gameDifficulty))
	#desc.text=tr(\"SUPERHERO\")

func reload_translation():
	for difficulty in Globals.Difficulty:
		get_node(difficulty).text = INITrans.GetString(\"Difficulty\",difficulty.to_upper())
	setDescText()

func _ready():
	var i = 0
	for difficulty in Globals.Difficulty:
		#print(tr(difficulty.to_upper()))
		var b = BitmapText({
			\"text\":INITrans.GetString(\"Difficulty\",difficulty.to_upper()),
			\"name\":difficulty,
			\"mouse_filter\":MOUSE_FILTER_PASS,
			\"mouse_default_cursor_shape\":CURSOR_POINTING_HAND
		})
		b.connect(\"gui_input\",self,\"input_touch\",[i])
		i+=1
		add_child(b)
	parent.highlightList(self,Globals.playerData.gameDifficulty)
	setDescText()
	#print(Globals.get(\"gameDifficulty\"))

func input_touch(event:InputEvent, i:int = 0):
	if event is InputEventMouseButton and event.pressed and event.button_index == 1:
		if i==Globals.playerData.gameDifficulty:
			
			#It has to be done on start/continue in case the player changed the language
			Globals.load_stage_cutscenes()
			Globals.reset_player_data()
			Globals.change_screen(get_tree(),\"ScreenSelectCharacter\")
		else:
			parent.selectSound.play()
			Globals.playerData.gameDifficulty=i
			parent.highlightList(self,Globals.playerData.gameDifficulty)

func input(event):
	if Input.is_action_just_pressed(\"ui_down\") and Globals.playerData.gameDifficulty < len(Globals.Difficulty)-1:
		Globals.playerData.gameDifficulty=Globals.playerData.gameDifficulty+1
		parent.highlightList(self,Globals.playerData.gameDifficulty)
		setDescText()
		parent.selectSound.play()
	elif Input.is_action_just_pressed(\"ui_up\") and Globals.playerData.gameDifficulty > 0:
		Globals.playerData.gameDifficulty=Globals.playerData.gameDifficulty-1
		parent.highlightList(self,Globals.playerData.gameDifficulty)
		setDescText()
		parent.selectSound.play()
	elif Input.is_action_just_pressed(\"ui_select\") or Input.is_action_just_pressed(\"ui_pause\"):
		#Globals.nextStage = \"res://Stages_Reina/Architect/StageArchitect.tscn\"
		#It has to be done on start/continue in case the player changed the language
		Globals.load_stage_cutscenes()
		Globals.reset_player_data()
		Globals.change_screen(get_tree(),\"ScreenSelectCharacter\")
	
func OnCommand():
	parent.diffusealpha(desc,1)
func OffCommand():
	parent.diffusealpha(desc,0)
"

[sub_resource type="DynamicFont" id=9]
size = 33
font_data = ExtResource( 9 )

[sub_resource type="GDScript" id=10]
script/source = "extends VBoxContainer

onready var parent = get_node(\"../\")
var selection = 0
#var propertyToAdjust=\"gameDifficulty\"

var extras_table = {
	\"Jukebox\":{
		\"hidden\":false
	},
	\"TestStage\":{
		\"hidden\":false
	},
	\"NSF_Test\":{
		\"hidden\":false
	},
	#\"ZeroTest\":{
	#	\"hidden\":true
	#},
	\"Credits\":{
		\"hidden\":false
	},
	\"AprilFools2022\":{
		\"hidden\":false
	},
	\"AprilFools2023\":{
		\"hidden\":false
	},
	\"PIURED_Debug\":{
		\"hidden\":false
	},
	\"EventMode\":{
		\"hidden\":false
	},
	\"CustomStage\":{
		\"hidden\":true #Because we need to check if PC
	},
	\"CustomCutscene\":{
		\"hidden\":true
	},
}

#BECAUSE IT'S NOT GODOT 4.0 YET AND I CAN'T PUT FUNCTIONS INSIDE DICTS
func action_Jukebox():
	Globals.change_screen(get_tree(),\"ScreenJukebox\")
	pass
func action_TestStage():
	get_tree().change_scene(\"res://Stages_Reina/TestStage.tscn\");

func action_ZeroTest():
	get_tree().change_scene(\"res://Stages/TestStage/TestStage.tscn\")

func unlock_ZeroTest()->bool:
	return Globals.unlockedZeroMode
	
func action_Credits():
	Globals.change_screen(get_tree(),\"ScreenCredits\")

func action_NSF_Test():
	get_tree().change_scene(\"res://Stages_Reina/TestStage_NSF/TestStage_NSF_2.tscn\")

func action_PIURED_Debug():
	get_tree().change_scene(\"res://Stages_Reina/Clear_And_Fail/PIURED_DebugTest.tscn\")

func action_EventMode():
	Globals.eventMode=true
	Globals.change_screen(get_tree(),\"ScreenTitleJoin\")

func action_CustomStage():
	var filePicker = parent.get_node(\"FileDialog_stage\")
	if OS.has_feature(\"standalone\"):
		filePicker.current_dir=OS.get_executable_path().get_base_dir()+\"/CustomStages/\"
	filePicker.popup()
	pass
	
func action_CustomCutscene():
	var filePicker = parent.get_node(\"FileDialog_cutscene\")
	if OS.has_feature(\"standalone\"):
		filePicker.current_dir=OS.get_executable_path().get_base_dir()+\"/GameData/Cutscene/\"
	filePicker.popup()
	pass

func action_AprilFools2022():
	Globals.nextCutscene=OS.get_executable_path().get_base_dir()+\"/GameData/Cutscene/april_fools_2022.txt\"
	Globals.change_screen(get_tree(),\"CutsceneFromFile\")

func action_AprilFools2023():
	OS.shell_open(\"https://objects-us-east-1.dream.io/smbuilds/SM5/Windows/M4A1-Chan%202023.zip\")

func unlock_CustomStage()->bool:
	return false
	
	
#	#if OS.has_feature(\"standalone\"):
#	if true:
#		match OS.get_name():
#			\"Windows\",\"WinRT\",\"X11\",\"macOS\",\"UWP\":
#				return true
#	return false
	
func unlock_CustomCutscene()->bool:
	return unlock_CustomStage()

func _ready():
	#var i = 0
	for option in extras_table:
		if extras_table[option]['hidden']==false or call(\"unlock_\"+option):
			var c = parent.BitmapText({
				\"text\":INITrans.GetString(\"Extras\",option),
				\"name\":option,
				\"mouse_filter\":MOUSE_FILTER_PASS,
				\"mouse_default_cursor_shape\":CURSOR_POINTING_HAND
			})
			add_child(c)
			
	parent.highlightList(self,0)
	realInitPos=rect_position.y
	#print(Globals.get(\"gameDifficulty\"))


func set_selection(new_sel:int=0):
	if new_sel == selection:
		return
		
	# Alternatively, new_sel = clamp(new_sel,0,get_child_count()-1)
	# But that converts int -> float -> int since we're not on Godot 4
	if new_sel < 0:
		new_sel = 0
	elif new_sel > get_child_count() - 1:
		new_sel = get_child_count() - 1
	
	selection = new_sel
	if selection > 4:
		moveListUp()
	else:
		moveListDown()
	parent.highlightList(self,selection)
	parent.selectSound.play()

func mouse_input(event):
	for i in range(get_child_count()):
		var n = get_child(i)
		var p = rect_position+n.rect_position
		if event.position.y > p.y and event.position.y < p.y+n.rect_size.y:
			if i==selection:
				call(\"action_\"+get_child(selection).name)
			else:
				set_selection(i)

func input(event):
	if event is InputEventMouseButton and event.pressed and event.button_index == 1:
		mouse_input(event)
	elif Input.is_action_pressed(\"ui_down\"):
		set_selection(selection+1)
	elif Input.is_action_pressed(\"ui_up\"):
		set_selection(selection-1)
	elif Input.is_action_just_pressed(\"ui_page_down\"):
		set_selection(selection+5)
	elif Input.is_action_just_pressed(\"ui_page_up\"):
		set_selection(selection-5)
	elif Input.is_action_just_pressed(\"ui_select\"):
		call(\"action_\"+get_child(selection).name)
		
var realInitPos
func moveListUp():
	#print(String(realInitPos))
	var tween2 = get_node(\"../Tween2\");
	var subList = self
	tween2.interpolate_property(subList, 'rect_position:y',
	null,
	realInitPos-75, #move 100px up
	.25, Tween.TRANS_QUAD, Tween.EASE_OUT);
	tween2.start();
	
func moveListDown():
	var tween2 = get_node(\"../Tween2\");
	var subList = self
	tween2.interpolate_property(subList, 'rect_position:y',
	null,
	realInitPos, #move to original position
	.25, Tween.TRANS_QUAD, Tween.EASE_OUT);
	tween2.start()


func _on_FileDialog_file_selected(path):
	var scene = ResourceLoader.load(path)
	#print(\"Loading \"+String(scene))
	get_tree().change_scene_to(scene)
	pass # Replace with function body.


func _on_FileDialog_cutscene_file_selected(path):
	#var scene = ResourceLoader.load(path)
	#var a = path.split('/')
	print(\"Loading \"+path)
	#return
	Globals.nextCutscene=path
	Globals.change_screen(get_tree(),\"CutsceneFromFile\")
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=11]
script/source = "extends Node2D

onready var parent = get_node(\"../\")
var existing_children:int
var displayedOptions:int=0

#var optionsList:PoolStringArray = []
func _ready():
	#I miss StepMania... A lot...
	\"\"\"
	for i,option in ipairs(options) do
		local tmpFrame = Def.ActorFrame{
			Name=\"Frame\"..i;
			Def.ActorMultiVertex{
				Name=\"Vertex\";
				InitCommand=function(subself)
					subself:xy(-25,-20);
					subself:SetDrawState{Mode=\"DrawMode_QuadStrip\"}
					--subself:ztest(true):ztestmode(\"ZTestMode_WriteOnFail\");
				end;
				GainFocusCommand=function(q)
					q:stoptweening():SetVertices({
						{{0, 0, 0}, Color.HoloBlue},
						{{40, 0, 0}, Color.HoloBlue},
						{{0, 40, 0}, Color.HoloBlue},
						{{0, 40, 0}, Color.HoloBlue}
					})
					q:decelerate(.45):SetVertices({
						{{0, 0, 0}, Color.HoloBlue},
						{{400+40, 0, 0}, Color.HoloBlue},
						{{0, 40, 0}, Color.HoloBlue},
						{{400-2, 40, 0}, Color.HoloBlue}
					})
				end;
				LoseFocusCommand=function(q)
					q:finishtweening():SetVertices({
						{{0, 0, 0}, Color.HoloBlue},
						{{0, 0, 0}, Color.HoloBlue},
						{{0, 40, 0}, Color.HoloBlue},
						{{0, 40, 0}, Color.HoloBlue}
					})
				end;
			};
			Def.BitmapText{
				Name=\"Text\";
				Font=\"Common Normal\";
				Text=option.string;
				InitCommand=cmd(horizalign,left);
				GainFocusCommand=cmd(stoptweening;linear,.1;diffuse,Color.Black);
				LoseFocusCommand=cmd(stoptweening;diffuse,color(\"ffffff\"));
				--GainFocusCommand=cmd(stoptweening;linear,.1;zoom,1;diffuse,Color.Blue);
				--LoseFocusCommand=cmd(stoptweening;linear,.1;zoom,0.9;diffuse,color(\"ffffff\"));
			}
		}
		if option.optionType then
				local clr = {.5,.5,.5,1};
				tmpFrame[#tmpFrame+1] = Def.ActorMultiVertex{
				Name=\"Vertex2\";
				InitCommand=function(subself)
					subself:xy(200-50,-20);
					subself:SetDrawState{Mode=\"DrawMode_QuadStrip\"}
					--subself:ztest(true):ztestmode(\"ZTestMode_WriteOnFail\");
				end;
				GainFocusCommand=function(q)
					q:stoptweening():SetVertices({
						{{0, 0, 0}, clr},
						{{0, 0, 0}, clr},
						{{-40, 40, 0}, clr},
						{{-40, 40, 0}, clr}
					})
					q:sleep(.45/4):decelerate(.45*.7):SetVertices({
						{{0, 0, 0}, clr},
						{{200+40+25, 0, 0}, clr},
						{{-40, 40, 0}, clr},
						{{200-2+25, 40, 0}, clr}
					})
				end;
				LoseFocusCommand=function(q)
					q:finishtweening():SetVertices({
						{{0, 0, 0}, {0,0,0,.5}},
						{{0, 0, 0}, {0,0,0,.5}},
						{{0, 40, 0}, {0,0,0,.5}},
						{{0, 40, 0}, {0,0,0,.5}}
					})
				end;
			};
		
			if option.optionType == \"int\" then
				--[[tmpFrame[#tmpFrame+1] = rectGen(200,8,1,{.5,.5,.5,.5})..{
					InitCommand=cmd(x,225);
				};]]
				--[[tmpFrame[#tmpFrame+1]=Def.Quad{
					InitCommand=cmd(setsize,223,40;x,223+40;diffuse,Color.Red)
				}]]
				tmpFrame[#tmpFrame+1] = Def.Quad{
					Name=\"SliderBack\";
					InitCommand=cmd(setsize,1,8;zoomtowidth,150;diffuse,Color.Black;horizalign,left;x,240-150/2);
					GainFocusCommand=cmd(stoptweening;sleep,.15;linear,.1;diffuse,Color.Black);
					LoseFocusCommand=cmd(stoptweening;diffuse,Color.White);
					
				}
				tmpFrame[#tmpFrame+1] = Def.Quad{
					Name=\"Slider\";
					InitCommand=cmd(setsize,1,8;zoomtowidth,150;diffuse,Color.HoloBlue;horizalign,left;x,240-150/2)
				}
				tmpFrame[#tmpFrame+1] = Def.BitmapText{
					Font=\"Common Normal\";
					Name='Value';
					Text='100';
					InitCommand=cmd(x,350;maxwidth,50);
				}
			else
				--[[tmpFrame[#tmpFrame+1]=Def.Quad{
					InitCommand=cmd(setsize,223,40;x,223+40;diffuse,Color.Red)
				}]]
				tmpFrame[#tmpFrame+1] = Def.BitmapText{
					Font=\"Common Normal\";
					Text='OFF';
					Name='BoolOff';
					InitCommand=cmd(x,223+40-223/2+223*.25;diffuse,Color.White);
					--GainFocusCommand=cmd(stoptweening;linear,.1;diffuse,Color.Black);
					GainFocusCommand=function(self)
						self:stoptweening():linear(.1):diffuse({0,0,0,self:GetDiffuseAlpha()});
					end;
					LoseFocusCommand=function(self)
						self:diffuse({1,1,1,self:GetDiffuseAlpha()});
					end;
				}
				
				tmpFrame[#tmpFrame+1] = Def.BitmapText{
					Font=\"Common Normal\";
					Text='ON';
					Name='BoolOn';
					InitCommand=cmd(x,223+40-223/2+223*.75;diffuse,{1,1,1,.5});
					GainFocusCommand=function(self)
						self:stoptweening():linear(.1):diffuse({0,0,0,self:GetDiffuseAlpha()});
					end;
					LoseFocusCommand=function(self)
						self:diffuse({1,1,1,self:GetDiffuseAlpha()});
					end;
				}
			end;
		end;
		oas[#oas+1] = tmpFrame;
	end;
	\"\"\"
	existing_children=get_child_count()
	
	
	var thisSystem:int = 0
	# Android TV is both console and mobile so don't use elif
	if OS.has_feature(\"pc\"):
		thisSystem |= Globals.OPTION_FLAG.PC
	if OS.has_feature(\"console\"):
		thisSystem |= Globals.OPTION_FLAG.CONSOLE
	if OS.has_feature(\"mobile\"):
		thisSystem |= Globals.OPTION_FLAG.MOBILE
	print(\"[ScreenTitleMenu Options] This device's capabilities are: \"+String(thisSystem))
	
	var i = 0
	for option in Globals.OPTIONS:
		
		if \"flag\" in Globals.OPTIONS[option]:
			var flag = Globals.OPTIONS[option]['flag']
			
			#If any of the flags matched any of the capabilities of this system
			if (flag & thisSystem) == 0:
				continue
			print(\"Option \"+option+\" matched capibilites \"+String(thisSystem))
		##Skip the fullscreen option on consoles
		#if OS.has_feature(\"console\") and option == \"isFullscreen\":
		#	continue
		
		var optionItem = Node2D.new()
		optionItem.name=\"Item\"+str(i)
		optionItem.set_meta(\"opt_name\",option)
		optionItem.position=Vector2(0,i*70)
		var optionNameActor = parent.BitmapText({
			\"name\":\"TextActor\",
			\"text\":INITrans.GetString(\"SystemOptions\",option),
			\"uppercase\":true,
			\"mouse_default_cursor_shape\": Control.CURSOR_POINTING_HAND
		})
		#print(parent.font.get_string_size(option))
		#print(Globals.OPTIONS[option])
		match Globals.OPTIONS[option]['type']:
			\"int\",\"list\":
				optionItem.add_child(parent.BitmapText({
					name=\"Value\",
					text=str(Globals.OPTIONS[option]['value']),
					\"uppercase\":true,
					rect_position=Vector2(650,0)
				}))
				#optionItem.get_node(\"Value\").connect(\"gui_input\",self,\"mouse_input\")
			_:
				optionItem.add_child(parent.BitmapText({
					\"name\":\"BoolOff\",
					\"text\":\"Off\",
					\"rect_position\":Vector2(650,0),
					\"uppercase\":true
				}))
				optionItem.add_child(parent.BitmapText({
					\"name\":\"BoolOn\",
					\"text\":\"On\",
					\"rect_position\":Vector2(820,0),
					\"uppercase\":true
				}))
		
		displayedOptions+=1
		optionItem.add_child(optionNameActor)
		i=i+1
		
		self.add_child(optionItem)
		#optionsList.append(option)
	highlightList()
	updateTranslation()
	realInitPos=position

func OffCommand():
	Globals.save_system_data()

var selection = 0

func highlightList():
	for node in get_children():
		if node.name == \"Item\"+str(selection):
			node.set(\"modulate\", Color(1,1,1,1));
		else:
			node.set(\"modulate\", Color(.5,.5,.5,1));
		if node.has_node(\"BoolOn\"):
			var opt = node.get_meta(\"opt_name\")
			#print(opt)
			highlightBool(node,Globals.OPTIONS[opt]['value'])
			
func highlightBool(node,b):
	node.get_node(\"BoolOff\").set(\"modulate\", Color(.5,.5,.5,1) if b else Color(1,1,1,1));
	node.get_node(\"BoolOn\").set(\"modulate\", Color(.5,.5,.5,1) if not b else Color(1,1,1,1));

func updateValue(selection, option):
	get_child(existing_children+selection).get_node(\"Value\").text=Globals.OPTIONS[option]['value']

func updateTranslation(refresh:bool=false,t:String=\"\"):
	if refresh:
		INITrans.SetLanguage(t)
		parent.setTranslated()
		parent.get_node(\"DifficultySelect\").reload_translation()
	for node in get_children():
		if node.has_meta(\"opt_name\"):
			var o = node.get_meta(\"opt_name\")
			var tn = node.get_node(\"TextActor\")
			tn.text=INITrans.GetString(\"SystemOptions\",o)
			var width = INITrans.font.get_string_size(tn.text).x
			if width > 600:
				var scaling = 600/width
				tn.rect_scale.x=scaling
			else:
				tn.rect_scale.x=1.0
#				#print(width)
			for nn in node.get_children():
				if nn is Label:
					nn.set(\"custom_fonts/font\",INITrans.font)
			#tn.set(\"custom_fonts/font\",INITrans.font)
			#if node.has_node(\"BoolOn\"):
			#	node.get_node(\"BoolOff\").set(\"custom_fonts/font\",INITrans.font)
			#	node.get_node(\"BoolOn\").set(\"custom_fonts/font\",INITrans.font)
			#elif node.has_node(\"\")
#What
var realInitPos
func moveListUp():
	#print(String(realInitPos))
	var tween2 = get_node(\"../Tween2\");
	var subList = self
	tween2.interpolate_property(subList, 'position:y',
	null,
	realInitPos.y-250, #move 100px up
	.25, Tween.TRANS_QUAD, Tween.EASE_OUT);
	tween2.start();
	
func moveListDown():
	var tween2 = get_node(\"../Tween2\");
	var subList = self
	tween2.interpolate_property(subList, 'position:y',
	null,
	realInitPos.y, #move to original position
	.25, Tween.TRANS_QUAD, Tween.EASE_OUT);
	tween2.start()

func mouse_input(event):
	for i in range(existing_children,get_child_count()):
		var n = get_child(i)
		if !(n is Node2D):
			continue
		var nPos = n.position+position
		if event.position.y > nPos.y and event.position.y < nPos.y+70:
			#print(n.get_meta('opt_name'))
			selection = i-existing_children
			highlightList()
			if selection < 6:
				moveListDown()
			else:
				moveListUp()
				
			if event.position.x > nPos.x+650:
				var o = n.get_meta('opt_name')
				if Globals.OPTIONS[o]['type']==\"bool\":
					Globals.OPTIONS[o]['value']=event.position.x > 820
					highlightBool(n,event.position.x > 820)
			else:
				parent.selectSound.play()
			break

func set_selection(new_sel:int=0):
	if new_sel<0:
		new_sel=0
	elif new_sel>displayedOptions-1:
		new_sel=displayedOptions-1
	if new_sel != selection:
		selection=new_sel
		parent.selectSound.play()
		highlightList()
		
		if selection < 6:
			moveListDown()
		else:
			moveListUp()

func input(event):
	if event is InputEventMouseButton and event.pressed and event.button_index == 1:
		mouse_input(event)
	elif Input.is_action_pressed(\"ui_down\"):
		set_selection(selection+1)
	elif Input.is_action_pressed(\"ui_up\"):
		set_selection(selection-1)
	elif Input.is_action_just_pressed(\"ui_page_down\"):
		set_selection(selection+5)
	elif Input.is_action_just_pressed(\"ui_page_up\"):
		set_selection(selection-5)
	elif Input.is_action_pressed(\"ui_left\"):
		var option = get_child(existing_children+selection).get_meta(\"opt_name\")
		if Globals.OPTIONS[option]['type']==\"bool\":
			Globals.OPTIONS[option]['value']=false
			highlightBool(get_child(existing_children+selection),false)
			if option==\"isFullscreen\":
				Globals.set_fullscreen(false)
			elif option==\"vsync\":
				OS.set_use_vsync(false)
		elif Globals.OPTIONS[option]['type']==\"int\":
			var val = Globals.OPTIONS[option]['value']
			if val > 0:
				val-=10
				Globals.OPTIONS[option]['value']=val
				get_child(existing_children+selection).get_node(\"Value\").text=String(val)
				if option==\"AudioVolume\" or option==\"SFXVolume\" or option==\"VoiceVolume\":
					if parent.reinaAudioPlayer.nsf_player != null:
						var realVolumeLevel = Globals.OPTIONS['AudioVolume']['value']*.6-60
						parent.reinaAudioPlayer.nsf_player.set_volume(realVolumeLevel);
					Globals.set_audio_levels()
				if option == \"VoiceVolume\":
					$Announcer.stop()
					$Announcer.play()
				#else:
				#	print(\"a\")
		elif Globals.OPTIONS[option]['type']==\"list\":
			var val = Globals.OPTIONS[option]['value']
			var idx = Globals.OPTIONS[option]['choices'].find(val,0)
			if idx >0:
				Globals.OPTIONS[option]['value']=Globals.OPTIONS[option]['choices'][idx-1]
				var t = Globals.OPTIONS[option]['value']
				if option==\"language\":
					updateTranslation(true,t)
					t=INITrans.GetString(\"Language\",t)
				get_child(existing_children+selection).get_node(\"Value\").text=t
		else:
			print(\"Unknown type! \"+Globals.OPTIONS[option]['type'])
	elif Input.is_action_pressed(\"ui_right\"):
		var option = get_child(existing_children+selection).get_meta(\"opt_name\")
		match Globals.OPTIONS[option]['type']:
			\"bool\":
				Globals.OPTIONS[option]['value']=true
				highlightBool(get_child(existing_children+selection),true)
				if option==\"isFullscreen\":
					Globals.set_fullscreen(true)
				elif option==\"vsync\":
					OS.set_use_vsync(true)
			\"int\":
				var val = Globals.OPTIONS[option]['value']
				if val < 100:
					val+=10
					Globals.OPTIONS[option]['value']=val
					get_child(existing_children+selection).get_node(\"Value\").text=String(val)
					if option==\"AudioVolume\" or option==\"SFXVolume\" or option==\"VoiceVolume\":
						if parent.reinaAudioPlayer.nsf_player != null:
							var realVolumeLevel = Globals.OPTIONS['AudioVolume']['value']*.6-60
							parent.reinaAudioPlayer.nsf_player.set_volume(realVolumeLevel);
						Globals.set_audio_levels()
					if option == \"VoiceVolume\":
						$Announcer.stop()
						$Announcer.play()
			\"list\":
				var val = Globals.OPTIONS[option]['value']
				var idx = Globals.OPTIONS[option]['choices'].find(val,0)
				if idx < len(Globals.OPTIONS[option]['choices'])-1:
					Globals.OPTIONS[option]['value']=Globals.OPTIONS[option]['choices'][idx+1]
					var t = Globals.OPTIONS[option]['value']
					if option==\"language\":
						updateTranslation(true,t)
						t=INITrans.GetString(\"Language\",t)
					get_child(existing_children+selection).get_node(\"Value\").text=t
	#elif Input.is_action_just_pressed(\"ui_select\"):
	#	call(\"action_\"+get_child(selection).name)
"

[sub_resource type="GDScript" id=12]
script/source = "extends AudioStreamPlayer

#test
func on_play_finished():
	get_tree().reload_current_scene()


func _on_CheatCodeHandler_cheat_detected(_a):
	#pass # Replace with function body.
	#print(code)
	if _a==\"UUDDLRLR\":
		Globals.unlockedZeroMode=true
		if Globals.playerHasSaveData:
			Globals.playerData.availableWeapons[1]=true
			Globals.playerData.availableWeapons[2]=true
			Globals.playerData.availableWeapons[3]=true
		get_parent().reinaAudioPlayer.stop_music()
		play()
		connect(\"finished\",self, \"on_play_finished\")
	elif _a==\"LLLRRRUUU\":
			get_tree().change_scene(\"res://Screens/ScreenDebugLvSelect/ScreenDebugLvSelect.tscn\")
"

[sub_resource type="GDScript" id=14]
script/source = "extends Panel

func _ready():
	if OS.is_debug_build():
		var vbox = $VBoxContainer
		for k in Globals.SCREENS:
			var btn = Button.new()
			btn.text = k
			btn.connect(\"pressed\",Globals,\"change_screen\",[get_tree(), k])
			vbox.add_child(btn)
	else:
		self.visible=false


func _on_Button_pressed():
	self.visible=false
"

[node name="MenuFrame" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 8 )

[node name="MainMenu" type="VBoxContainer" parent="."]
anchor_top = 0.5
anchor_bottom = 0.5
margin_left = 20.0
margin_top = -164.0
margin_right = 621.0
margin_bottom = 326.0
focus_mode = 2
custom_constants/separation = 30

[node name="StartLabel" type="Label" parent="MainMenu" groups=["TEST"]]
margin_right = 601.0
margin_bottom = 45.0
mouse_filter = 1
mouse_default_cursor_shape = 2
input_pass_on_modal_close_click = false
custom_fonts/font = ExtResource( 5 )
text = "START_GAME"
uppercase = true
script = SubResource( 1 )
submenuNode = "DifficultySelect"

[node name="Continue" type="Label" parent="MainMenu" groups=["TEST"]]
margin_top = 75.0
margin_right = 601.0
margin_bottom = 120.0
mouse_filter = 1
mouse_default_cursor_shape = 2
custom_fonts/font = ExtResource( 5 )
text = "CONTINUE"
uppercase = true
script = SubResource( 2 )
hasSubmenu = false

[node name="playIntro" type="Label" parent="MainMenu" groups=["TEST"]]
visible = false
margin_top = 150.0
margin_right = 601.0
margin_bottom = 195.0
mouse_filter = 1
mouse_default_cursor_shape = 2
custom_fonts/font = ExtResource( 5 )
text = "PLAY_INTRO"
uppercase = true
script = SubResource( 3 )

[node name="OptionsLabel" type="Label" parent="MainMenu" groups=["TEST"]]
margin_top = 150.0
margin_right = 601.0
margin_bottom = 195.0
mouse_filter = 1
mouse_default_cursor_shape = 2
custom_fonts/font = ExtResource( 5 )
text = "OPTIONS"
uppercase = true
script = SubResource( 4 )
submenuNode = "OptionsList"

[node name="JukeboxLabel" type="Label" parent="MainMenu" groups=["TEST"]]
margin_top = 225.0
margin_right = 601.0
margin_bottom = 270.0
mouse_filter = 1
mouse_default_cursor_shape = 2
custom_fonts/font = ExtResource( 5 )
text = "EXTRAS"
uppercase = true
script = SubResource( 5 )
submenuNode = "Extras"

[node name="Home page" type="Label" parent="MainMenu" groups=["TEST"]]
margin_top = 300.0
margin_right = 601.0
margin_bottom = 345.0
mouse_filter = 1
mouse_default_cursor_shape = 2
custom_fonts/font = ExtResource( 5 )
text = "HOMEPAGE"
uppercase = true
script = SubResource( 6 )

[node name="QuitLabel" type="Label" parent="MainMenu" groups=["TEST"]]
margin_top = 375.0
margin_right = 601.0
margin_bottom = 420.0
mouse_filter = 1
mouse_default_cursor_shape = 2
custom_fonts/font = ExtResource( 5 )
text = "QUIT"
uppercase = true
script = SubResource( 7 )

[node name="DifficultySelect" type="VBoxContainer" parent="."]
anchor_top = 0.5
anchor_bottom = 0.5
margin_left = 20.0
margin_top = -186.0
margin_right = 492.0
margin_bottom = 104.0
custom_constants/separation = 30
script = SubResource( 8 )

[node name="DifficultySelect_Description" type="Label" parent="."]
margin_top = 565.0
margin_right = 1280.0
margin_bottom = 665.0
custom_fonts/font = SubResource( 9 )
text = "difficulty help text goes here"
align = 1
valign = 1
autowrap = true
clip_text = true
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": "sdfsdfsddfsfsdf"
}

[node name="Extras" type="VBoxContainer" parent="."]
anchor_bottom = 1.0
margin_top = 219.0
margin_right = 689.0
custom_constants/separation = 30
script = SubResource( 10 )

[node name="OptionsList" type="Node2D" parent="."]
visible = false
position = Vector2( 0, 200 )
script = SubResource( 11 )

[node name="Polygon2D" type="Polygon2D" parent="OptionsList"]
visible = false
position = Vector2( 4, -88 )
scale = Vector2( 1, 0.36616 )
polygon = PoolVector2Array( 0, 0, 1280, 0, 1280, 720, 0, 720 )
vertex_colors = PoolColorArray( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1 )

[node name="Polygon2D2" type="Polygon2D" parent="OptionsList"]
visible = false
position = Vector2( 544, 461 )
scale = Vector2( 0.584375, 0.387182 )
polygon = PoolVector2Array( 0, 0, 1280, 0, 1280, 720, 0, 720 )
vertex_colors = PoolColorArray( 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 )

[node name="Announcer" type="AudioStreamPlayer" parent="OptionsList"]
stream = ExtResource( 7 )
bus = "Voices"

[node name="Select" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 10 )
bus = "Player/Enemies"

[node name="Confirm" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
volume_db = 4.0
bus = "Player/Enemies"

[node name="Continue_Sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 14 )
bus = "Player/Enemies"

[node name="Tween" type="Tween" parent="."]

[node name="Tween2" type="Tween" parent="."]

[node name="Tween3" type="Tween" parent="."]

[node name="FileDialog_stage" type="FileDialog" parent="."]
margin_left = 486.274
margin_top = 111.266
margin_right = 874.274
margin_bottom = 599.266
rect_min_size = Vector2( 150, 52.5 )
window_title = "Open a File"
mode = 0
access = 2
filters = PoolStringArray( "*.tscn ; Godot Scenes" )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FileDialog_cutscene" type="FileDialog" parent="."]
margin_left = 486.274
margin_top = 111.266
margin_right = 874.274
margin_bottom = 599.266
rect_min_size = Vector2( 150, 52.5 )
window_title = "Open a File"
mode = 0
access = 2
filters = PoolStringArray( "*.json ; Cutscene Scripts" )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AudioStreamPlayer2" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 11 )
bus = "Music"
script = SubResource( 12 )

[node name="CheatCodeHandler" type="Node" parent="AudioStreamPlayer2"]
script = ExtResource( 6 )
codes = [ "UUDDLRLR", "LLLRRRUUU" ]

[node name="DebugPanel" type="Panel" parent="."]
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = -447.0
margin_top = -242.0
margin_bottom = 242.0
size_flags_horizontal = 3
size_flags_vertical = 3
script = SubResource( 14 )
__meta__ = {
"_edit_group_": true
}

[node name="VBoxContainer" type="VBoxContainer" parent="DebugPanel"]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 3
__meta__ = {
"_edit_lock_": true
}

[node name="Button" type="Button" parent="DebugPanel/VBoxContainer"]
margin_right = 447.0
margin_bottom = 20.0
text = "hide panel"

[node name="Transition" parent="." instance=ExtResource( 13 )]
visible = false
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 0.0
margin_top = 0.0
margin_right = 0.0
margin_bottom = 0.0

[connection signal="file_selected" from="FileDialog_stage" to="Extras" method="_on_FileDialog_file_selected"]
[connection signal="file_selected" from="FileDialog_cutscene" to="Extras" method="_on_FileDialog_cutscene_file_selected"]
[connection signal="cheat_detected" from="AudioStreamPlayer2/CheatCodeHandler" to="AudioStreamPlayer2" method="_on_CheatCodeHandler_cheat_detected"]
[connection signal="pressed" from="DebugPanel/VBoxContainer/Button" to="DebugPanel" method="_on_Button_pressed"]
