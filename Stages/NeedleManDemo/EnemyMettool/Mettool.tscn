[gd_scene load_steps=4 format=2]

[ext_resource path="res://Stages/NeedleManDemo/EnemyMettool/MettoolSpriteFrames.tres" type="SpriteFrames" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

const maxHealth = 5
export var facingRight = false
var curHealth;
var direction
#if true, bullet will reflect.
var is_reflecting = false;

onready var waitTimer = $WaitTimer
onready var walkTimer = $WalkTimer
onready var sprite = $AnimatedSprite
onready var collision = $CollisionShape2D
var bullet = preload(\"res://Stages/NeedleManDemo/EnemyMettool/MettoolBullet.tscn\")

enum STATES {
	WAIT,
	ANIM,
	WALK,
}

var sts = [ \"Wait\", \"Anim\", \"Walk\" ]

var curState = 0

func _ready():
	sprite.flip_h = !facingRight
	curHealth = maxHealth
	sprite.set_animation(\"out\")
	sprite.play()
	sprite.frame = 2
	waitTimer.connect(\"timeout\",self,\"waitTimeout\")
	walkTimer.connect(\"timeout\",self,\"walkTimeout\")
	waitTimer.start()
	sprite.connect(\"animation_finished\",self,\"animationFinished\")
	$Area2D.connect(\"body_entered\",self,\"touched_player\")
	
func _physics_process(delta):
	$Label.text = sts[curState] + \" | \" + sprite.get_animation()
	if curState == STATES.WALK:
		if sprite.flip_h:
			move_and_slide(Vector2(-300,300))
		else:
			move_and_slide(Vector2(300,300))

func waitTimeout():
	sprite.flip_h = (get_node(\"/root/Node2D/Player\").global_position.x < global_position.x)
	sprite.set_animation(\"in\")
	is_reflecting = false
	#collision.transform.y = Vector2(0,0)
	curState = STATES.ANIM
	

func walkTimeout():
	sprite.set_animation(\"out\")
	curState = STATES.WAIT
	is_reflecting = true
	#collision.transform.y = Vector2(0,16)
	waitTimer.start()

func animationFinished():
	if curState == STATES.ANIM:
		shoot()
		sprite.set_animation(\"walking\")
		walkTimer.start()
		curState = STATES.WALK

func shoot():
	var ss
	if sprite.flip_h:
		ss = -1.0
	else:
		ss = 1.0
	
	#for loops? What's a for loop?
	var bi = bullet.instance()
	bi.position = self.position
	get_parent().add_child(bi)
	bi.init(Vector2(10*ss,-5))
	
	var bi2 = bullet.instance()
	bi2.position = self.position
	get_parent().add_child(bi2)
	bi2.init(Vector2(10*ss,0))
	
	var bi3 = bullet.instance()
	bi3.position = self.position
	get_parent().add_child(bi3)
	bi3.init(Vector2(10*ss,5))
	
	add_collision_exception_with(bi) # Make bullet and this not collide
	add_collision_exception_with(bi2) # Make bullet and this not collide
	add_collision_exception_with(bi3) # Make bullet and this not collide
	
	#Make the bullets not collide with eachother
	bi.add_collision_exception_with(bi2)
	bi.add_collision_exception_with(bi3)
	
	bi2.add_collision_exception_with(bi)
	bi2.add_collision_exception_with(bi3)
	
	bi3.add_collision_exception_with(bi)
	bi3.add_collision_exception_with(bi2)

func touched_player(obj):
	if obj.has_method(\"enemy_touched\"):
		obj.call(\"enemy_touched\",self)

func damage(amount):
	curHealth -= amount
	#print(\"Took damage!\")
	if curHealth <= 0:
		queue_free()
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 32, 36 )

[node name="KinematicBody2D5" type="KinematicBody2D"]
collision_layer = 26
collision_mask = 26
script = SubResource( 1 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
scale = Vector2( 4, 4 )
frames = ExtResource( 1 )
animation = "in"
frame = 2
flip_h = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, 4 )
shape = SubResource( 2 )

[node name="WaitTimer" type="Timer" parent="."]
wait_time = 4.0
one_shot = true

[node name="WalkTimer" type="Timer" parent="."]
one_shot = true

[node name="Label" type="Label" parent="."]
margin_right = 40.0
margin_bottom = 14.0

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Area2D"]
position = Vector2( 0, 4 )
shape = SubResource( 2 )
