[gd_scene load_steps=18 format=2]

[ext_resource path="res://Stages_Reina/Bosses/Scarecrow/BossScarecrow.tscn" type="PackedScene" id=1]
[ext_resource path="res://Stages_Reina/8bitBaseStage.tscn" type="PackedScene" id=2]
[ext_resource path="res://Stages_Reina/Scarecrow/quicksand_bottom.png" type="Texture" id=3]
[ext_resource path="res://Stages_Reina/Scarecrow/quicksand_top.png" type="Texture" id=4]
[ext_resource path="res://ParticleEffects/AlphaMaskBlack.tres" type="Material" id=5]
[ext_resource path="res://Character Sprites/skorp/dustCloud 2x1.png" type="Texture" id=6]
[ext_resource path="res://Various Objects/whiteSpikeball.png" type="Texture" id=7]
[ext_resource path="res://Various Objects/PickupAmmoSmall.tscn" type="PackedScene" id=8]
[ext_resource path="res://Stages_Reina/Enemies/Dinergate.tscn" type="PackedScene" id=9]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

export (bool) var enable_scarecrow=false

func _ready():
	var child = $BossScarecrow
	if enable_scarecrow:
		var s:AudioStreamPlayer = child.playIntro(true)
		s.connect(\"finished\",self,'enable')

func enable():
	$BossScarecrow.enabled=true
	return

var b = preload(\"res://Stages_Reina/Enemies/bulletDanmaku.tscn\")
func _input(event:InputEvent):
	#print('a')
	if event is InputEventKey:
		var root = get_node_or_null(\"/root/Node2D/\")
		var p = root.get_player()
		if Input.is_key_pressed(KEY_1):
			print(\"Spawned lance\")
			gen_lance()
		elif Input.is_key_pressed(KEY_2):
			if root != null:
				gen_spread(root,p.cell2pos(Vector2(4,2)))
				gen_spread(root,p.cell2pos(Vector2(10,2)))
				gen_spread(root,p.cell2pos(Vector2(16,2)))
		elif Input.is_key_pressed(KEY_3):
			gen_curtain(root,p.cell2pos(Vector2(10,2)),9,0)
			gen_curtain(root,p.cell2pos(Vector2(10,2)),10,.5)
			gen_curtain(root,p.cell2pos(Vector2(10,2)),9,1)
		elif Input.is_key_pressed(KEY_4):
			gen_spin(root,p.cell2pos(Vector2(10,6)))
		#else:
		#	print('lol')
	
func gen_lance():
	var root = get_node_or_null(\"/root/Node2D/\")
	if root != null:
		var p = root.get_player()
		for j in range(2):
			for i in range(3):
				var facing = i-1
				var bi = b.instance()
				root.add_child(bi)
				bi.position = p.cell2pos(Vector2(6,1))
				bi.timer=j*-.1
				bi.special_type=1
				bi.time_to_reverse=0.2
				bi.init(Vector2(5*facing,6))
				
				if i==0:
					bi.shootSound.play()
	else:
		print(\"root is null?????\")

func gen_spread(root:Node2D,startPos:Vector2):
	var startingAngle = Vector2(0,8)
	for j in range(5):
		var bi = b.instance()
		root.add_child(bi)
		bi.position = startPos
		bi.CubicSpread=Vector2((j-2)*2,-2)
		var newAngle = startingAngle
		newAngle.x=newAngle.x+(j-2)
		bi.init(newAngle)
		if j==0:
			bi.shootSound.play()

func gen_curtain(root:Node2D,centerPos:Vector2,numToGenerate:int=9,delay:float=0):
	var spread = 64
	var v = Vector2(0,8)
	for j in range(numToGenerate):
		var bi = b.instance()
		root.add_child(bi)
		bi.position = centerPos
		
		bi.special_type=2
		bi.destination_spread_xpos=Vector2(bi.position.x+(float(j)-numToGenerate/2)*128.0,.3)
		if numToGenerate%2==0:
			bi.destination_spread_xpos.x+=64
		
		#If odd, minus floor(numToGenerate/2)
		#If even, plus half the spread?
		#bi.position.x+= (float(j)-numToGenerate/2)*128.0
		#if numToGenerate%2==0:
		#	bi.position.x+=64
		#bi.CubicSpread=Vector2((j-2)*2,-2)
		#var newAngle = startingAngle
		#newAngle.x=newAngle.x+(j-2)
		bi.timer-=delay
		bi.init(v)
		if j==0:
			bi.shootSound.play()
			
func gen_spin(root:Node2D,centerPos:Vector2,numToGenerate:int=9):
	var bi = b.instance()
	root.add_child(bi)
	bi.position = centerPos-Vector2(0,5*16)
	bi.special_type=3
	bi.init(Vector2(10,0))
	
	bi = b.instance()
	root.add_child(bi)
	bi.position = centerPos-Vector2(0,-5*16)
	bi.special_type=3
	bi.init(Vector2(-10,0))
#func gen_explode():
#	for j in range(5):
		
"

[sub_resource type="AtlasTexture" id=24]
atlas = ExtResource( 6 )
region = Rect2( 0, 0, 8, 10 )

[sub_resource type="AtlasTexture" id=25]
atlas = ExtResource( 6 )
region = Rect2( 8, 0, 8, 10 )

[sub_resource type="SpriteFrames" id=4]
animations = [ {
"frames": [ SubResource( 24 ), SubResource( 25 ) ],
"loop": false,
"name": "default",
"speed": 0.0
} ]

[sub_resource type="Animation" id=5]
resource_name = "default"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("RightC:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 32, 58 ), Vector2( 96, 48 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("RightC:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("RightC:modulate:a")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("LeftC:modulate:a")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("LeftC:frame")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("LeftC:position")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -32, 58 ), Vector2( -96, 48 ) ]
}

[sub_resource type="Animation" id=6]
resource_name = "default"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("RightC:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 32, 58 ), Vector2( 96, 48 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("RightC:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("RightC:modulate:a")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("LeftC:modulate:a")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("LeftC:frame")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("LeftC:position")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -32, 58 ), Vector2( -96, 48 ) ]
}

[sub_resource type="GDScript" id=26]
script/source = "extends Node2D

const b = preload(\"res://Stages_Reina/Enemies/bulletDanmaku.tscn\")

var radius:float=50.0

func spawn():
	
	var bi = b.instance()
	self.add_child(bi)
	bi.position = Vector2(0,-radius)
	bi.special_type=4
	bi.init(Vector2(0,0))
	#bi.init(Vector2(radius/4,0))
	#bi.init(Vector2(0,0))
	print(get_child_count())

func _ready():
	#spawn()
	pass

func _draw():
	draw_circle(Vector2(0,0),radius,Color.red)
	if get_child_count()>0:
		draw_line(Vector2(0,0),self.get_child(0).position,Color.blue)

func _process(delta):
	pass

func _physics_process(delta):
	radius+=delta*10
	for c in get_children():
		# 1 full circle (i.e. 2 * PI) every second, clockwise
		var rotateBy:float = 2.0 * PI * delta*1.0
		
		
		#c.position=c.position.rotated(rotateBy)
		#Efficiency is for lamers
		#var offset = position.direction_to(c.position)*radius
		#c.position=offset.rotated(rotateBy)
		var nPos:Vector2 = c.position.rotated(rotateBy)
		#c.position=nPos
		c.position=Vector2(0,0).direction_to(nPos)*radius
		
		# TODO: I'm pretty sure there's some way to just subtract it from
		# rotateBy instead of having to create 3 variables
		#movement = movement.rotated(rotateBy)
	update()
	
func _input(_event):
	if Input.is_action_just_pressed(\"ui_up\"):
		radius+=10
	elif Input.is_action_just_pressed(\"ui_down\"):
		radius-=10
		#print(\"ayy lmao\")
	
	if _event is InputEventKey and Input.is_key_pressed(KEY_5):
		spawn()
	update()
"

[sub_resource type="GDScript" id=7]
script/source = "extends Sprite

func _input(event):
	if event is InputEventKey and Input.is_key_pressed(KEY_0):
		set_process(true)

#//Stolen from RageUtil
#/**
# * @brief Scales x so that l1 corresponds to l2 and h1 corresponds to h2.
# *
# * This does not modify x, so it MUST assign the result to something!
# * Do the multiply before the divide to that integer scales have more precision.
# *
# * One such example: SCALE(x, 0, 1, L, H); interpolate between L and H.
# */
static func SCALE(x:float, l1:float, h1:float, l2:float, h2:float)->float:
	return (((x) - (l1)) * ((h2) - (l2)) / ((h1) - (l1)) + (l2))

#Returns within range of 0 to 1
static func Flip(x:float)->float:
	return 1.0-x

#Returns within range of 0 to 1
static func EaseOut(t:float)->float:
	return Flip(pow(Flip(t),2))

var startingPos:float=18*64
var endingPos:float=2*64

var timer:float=0.0
var length:float=1.0
func _process(delta):
	
	#I don't think the full SCALE func is needed for this but 
	#math is extremely cheap for the CPU anyways
	var timeScaled:float = SCALE(timer,0,length,0,1)
	
	self.position.x=startingPos+EaseOut(timeScaled)*(endingPos-startingPos)

	timer+=delta
	if timer>=length:
		timer=0
		set_process(false)
"

[node name="Node2D" instance=ExtResource( 2 )]
adjust_camera = true
topBound = -999
rightBound = 20
bottomBound = 12

[node name="ColorRect" type="ColorRect" parent="." index="0"]
margin_left = 624.0
margin_top = 64.0
margin_right = 656.0
margin_bottom = 704.0

[node name="ColorRect2" type="ColorRect" parent="." index="1"]
margin_left = 64.0
margin_top = 368.0
margin_right = 1216.0
margin_bottom = 400.0

[node name="TileMap" parent="." index="3"]
tile_data = PoolIntArray( 0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 0, 7, 0, 0, 8, 0, 0, 9, 0, 0, 10, 0, 0, 11, 0, 0, 12, 0, 0, 13, 0, 0, 14, 0, 0, 15, 0, 0, 16, 0, 0, 17, 0, 0, 18, 0, 0, 19, 0, 0, 65536, 0, 0, 65555, 0, 0, 131072, 0, 0, 131091, 0, 0, 196608, 0, 0, 196627, 0, 0, 262144, 0, 0, 262163, 0, 0, 327680, 0, 0, 327699, 0, 0, 393216, 0, 0, 393235, 0, 0, 458752, 0, 0, 458771, 0, 0, 524288, 0, 0, 524307, 0, 0, 589824, 0, 0, 589843, 0, 0, 655360, 0, 0, 655379, 0, 0, 720896, 0, 0, 720897, 0, 0, 720898, 0, 0, 720899, 0, 0, 720900, 0, 0, 720901, 0, 0, 720902, 0, 0, 720903, 0, 0, 720904, 0, 0, 720905, 0, 0, 720906, 0, 0, 720907, 0, 0, 720908, 0, 0, 720909, 0, 0, 720910, 0, 0, 720911, 0, 0, 720912, 0, 0, 720913, 0, 0, 720914, 0, 0, 720915, 0, 0 )

[node name="PlayerHolder" parent="." index="6"]
position = Vector2( 116.736, 563.476 )

[node name="Room" type="Node2D" parent="." index="7"]

[node name="Node2D" type="Node2D" parent="Room" index="0"]
script = SubResource( 1 )

[node name="BossScarecrow" parent="Room/Node2D" index="0" instance=ExtResource( 1 )]
position = Vector2( 1066.82, 621.542 )
collision_layer = 2
stage_finished_when_killed = false

[node name="DustCloud" type="Node2D" parent="Room/Node2D" index="1"]
position = Vector2( 640, -64 )

[node name="RightC" type="AnimatedSprite" parent="Room/Node2D/DustCloud" index="0"]
material = ExtResource( 5 )
position = Vector2( 32, 58 )
scale = Vector2( 4, 4 )
frames = SubResource( 4 )

[node name="LeftC" type="AnimatedSprite" parent="Room/Node2D/DustCloud" index="1"]
material = ExtResource( 5 )
position = Vector2( -32, 58 )
scale = Vector2( 4, 4 )
frames = SubResource( 4 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Room/Node2D/DustCloud" index="2"]
anims/default = SubResource( 5 )
"anims/default 2" = SubResource( 6 )

[node name="DanmakuSpinHandler" type="Node2D" parent="Room/Node2D" index="2"]
position = Vector2( 640, 384 )
script = SubResource( 26 )

[node name="QuicksandTop" type="Sprite" parent="." index="8"]
position = Vector2( 704, 672 )
scale = Vector2( 4, 4 )
texture = ExtResource( 4 )
region_enabled = true
region_rect = Rect2( 16, 0, 320, 16 )
__meta__ = {
"_edit_group_": true
}

[node name="QuicksandBottom" type="Sprite" parent="QuicksandTop" index="0"]
position = Vector2( 0, 40 )
texture = ExtResource( 3 )
region_enabled = true
region_rect = Rect2( 0, 0, 352, 64 )

[node name="Sprite" type="Sprite" parent="." index="9"]
position = Vector2( 128, 128 )
texture = ExtResource( 7 )
script = SubResource( 7 )

[node name="PickupAmmoSmall" parent="." index="10" instance=ExtResource( 8 )]
position = Vector2( 288, 544 )

[node name="Dinergate" parent="." index="11" instance=ExtResource( 9 )]
position = Vector2( 576, 672 )
