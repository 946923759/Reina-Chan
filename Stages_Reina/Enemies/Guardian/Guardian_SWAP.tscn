[gd_scene load_steps=6 format=2]

[ext_resource path="res://Stages_Reina/Enemies/Guardian/NotSniperJoe_Alt.tscn" type="PackedScene" id=1]
[ext_resource path="res://Stages_Reina/Enemies/Guardian/Guardian_SWAP_throw.png" type="Texture" id=2]
[ext_resource path="res://Stages_Reina/Enemies/Guardian/Guardian_SWAP.png" type="Texture" id=3]

[sub_resource type="GDScript" id=1]
script/source = "#extends \"res://Stages/EnemyBaseScript.gd\"
extends KinematicBody2D

export(int, 1, 50) var maxHealth = 10
var curHealth;
# warning-ignore:unused_class_variable
var is_reflecting = false; #This is unused, it's just because the bullet class expects it to be there
var _is_reflecting = false;
#-1 to move left, 1 to move right
enum DIRECTION {LEFT = -1, RIGHT = 1}
export(DIRECTION) var facing = DIRECTION.LEFT

#This is only if you didn't override objectTouched!
#There might be cases where you need to override it.
export(int,0,25) var player_damage = 1

var bullet = preload(\"res://Stages_Reina/Enemies/Guardian/Guardian SWAP boomerang.tscn\")
var smallExplosion = preload(\"res://Stages/EnemyExplodeSmall.tscn\")

enum STATES {
	GUARDING = 0,
	SHOT,
	WAIT_FOR_BOOMERANG
}

var state: int = 0
var timer: float = 0.0

onready var sprite = $AnimatedSprite
onready var hurtSound = $HurtSound

func _ready():
# warning-ignore:return_value_discarded
	$Area2D.connect(\"body_entered\",self,\"objectTouched\")
	#$Area2D2.connect(\"body_entered\",self,\"touched_bullet\")
	#add_collision_exception_with($Area2D2)
	curHealth = maxHealth
	#assert(curHealth)
	sprite.flip_h = (facing == DIRECTION.RIGHT)
	set_physics_process(true);
# warning-ignore:return_value_discarded
	#$Area2D.connect(\"body_entered\",self,\"objectTouched\")
	sprite.play()
	
	
#The duration that the sprite has been colored white.
var whiteTime = 0
func _process(delta):
	#move_and_slide(Vector2(0,300))
	#label.text = String(curHealth) + \"/\" + String(maxHealth)
	#label.text = String(curTime)

	if !sprite.use_parent_material:
		whiteTime += delta
		if whiteTime > .1:
			sprite.use_parent_material = true
	#if $DebugShowFacing.visible:
	#	$DebugShowFacing.text = str(facing)
	
	if timer > 0:
		timer-=delta
		return
	
	#print(String(state))
	match state:
		STATES.SHOT:
			sprite.set_animation(\"shoot\")
			_is_reflecting = false
			var bi = bullet.instance()
			var pos = position + Vector2(55*facing, 8)
			
			bi.position = pos
			get_parent().add_child(bi)
			bi.init(1.5,facing==DIRECTION.LEFT)
			
			#self.add_collision_exception_with(bi)# Make bullet and this not collide
			#print(\"Fired bullet.\")
			timer=3.0
			state +=1
		STATES.WAIT_FOR_BOOMERANG:
			_is_reflecting=true
			sprite.set_animation(\"default\")
			timer=1
			state=0
		STATES.GUARDING:
			_is_reflecting=true
			timer=1
			state=1
		_:
			print(\"lol something is broken\")

func objectTouched(obj):
	if obj.has_method(\"enemy_touched\"):
		obj.enemy_touched_alt(self,false)
	elif obj.has_method(\"player_touched\"): #If enemy touched player
		obj.call(\"player_touched\",self,player_damage)


#We want an isAlive var so we can play the death animation only one time
var isAlive = true
#damage is called by the player weapon, so don't rename it.
func damage(amount):
	curHealth -= amount
	#print(\"Took damage!\")
	if curHealth <= 0:
		if isAlive:
			killSelf()
	else:
		#set false so the white tint shader will show up.
		hurtSound.play()
		sprite.use_parent_material = false
		whiteTime = 0

func killSelf():
	print(self.name+\" queued to be killed.\")
	isAlive = false
	set_physics_process(false)
	sprite.visible = false
	sprite.stop()
	dropRandomItem()
	var e = smallExplosion.instance()
	e.position = position
	#e.position.y-=32
	get_parent().add_child(e)
	
	self.queue_free()

var health = preload(\"res://Various Objects/HeartDrop.tscn\")
var smallHealth = preload(\"res://Various Objects/SmallHeartDrop.tscn\")

var ammo = preload(\"res://Various Objects/MPDrop.tscn\")
var smallAmmo = preload(\"res://Various Objects/PickupAmmoSmall.tscn\")

var oneUp = preload(\"res://Various Objects/1UP_Drop.tscn\")
func dropRandomItem():
	
	#Nothing = 24/128
	#Bonus Ball = 69/128     93
	#Small Weapon = 15/128   108
	#Small Health = 15/128   123
	#Large Weapon = 2/128    125
	#Large Health = 2/128    127
	#1 Up = 1/128            128
	var r = randi() % 128 + 1
	#var r = 120
	
	if r < 93:    #Nothing
		#print(\"Drop result: Nothing\")
		return
	elif r < 108: #Small weapon
		#print(\"Drop result: Small weapon\")
		var h = smallAmmo.instance()
		h.position = position
		h.linear_velocity = Vector2(0,-400)
		get_parent().add_child(h)
		pass
	elif r < 123: #small health
		#print(\"Drop result: small health\")
		var h = smallHealth.instance()
		h.position = position
		h.linear_velocity = Vector2(0,-400)
		get_parent().add_child(h)
	elif r < 125: #Large weapon
		var h = ammo.instance()
		h.position = position
		h.add_central_force(Vector2(0,-200))
		get_parent().add_child(h)
		pass
	elif r < 127: #Large health
		#print(\"Drop result: large health\")
		var h = health.instance()
		h.position = position
		h.add_central_force(Vector2(0,-200))
		get_parent().add_child(h)
	else:         #1-Up
		#print(\"Drop result: 1-Up\")
		var h = oneUp.instance()
		h.position = position
		h.add_central_force(Vector2(0,-200))
		get_parent().add_child(h)
"

[sub_resource type="SpriteFrames" id=2]
animations = [ {
"frames": [ ExtResource( 3 ) ],
"loop": true,
"name": "default",
"speed": 5.0
}, {
"frames": [ ExtResource( 2 ) ],
"loop": true,
"name": "shoot",
"speed": 5.0
} ]

[node name="Guardian_SWAP" instance=ExtResource( 1 )]
script = SubResource( 1 )
maxHealth = 10

[node name="AnimatedSprite" parent="." index="0"]
frames = SubResource( 2 )
